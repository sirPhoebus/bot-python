import requests
import numpy as np
import pandas as pd
import random

asset_name = "BTCUSDT"
investment_amount = 10000

# Genetic Algorithm Parameters
POPULATION_SIZE = 50
GENERATIONS = 100
MUTATION_RATE = 0.1
CROSSOVER_RATE = 0.8

class BollingerBandStrategy:
    def __init__(self, length=20, mult=2.0):
        self.counter = 0
        self.last_closed_position = None
        self.length = length
        self.mult = mult

    def evaluate(self, candle, context):
        # Assuming 'context' is a DataFrame of past candles
        context = context.append(candle, ignore_index=True)
        if len(context) < self.length:
            return None

        high_prices = context['high'][-self.length:]
        basis = np.mean(high_prices)
        dev = self.mult * np.std(high_prices)
        upper = basis + dev
        lower = basis - dev
        current_price = candle['close']
        
        condition_for_long = current_price < lower
        condition_for_short = current_price > upper

        if self.last_closed_position == 'long':
            if condition_for_short:  # Replace with your actual condition
                self.counter += 1
                if self.counter >= 2:
                    self.counter = 0
                    self.last_closed_position = None  # Resetting the last closed position
                    return 'short'
            else:
                self.counter = 0  # Reset counter if no opposite candles

        elif self.last_closed_position == 'short':
            if condition_for_long:  # Replace with your actual condition
                self.counter += 1
                if self.counter >= 2:
                    self.counter = 0
                    self.last_closed_position = None  # Resetting the last closed position
                    return 'long'
            else:
                self.counter = 0  # Reset counter if no opposite candles
        
        # If last_closed_position is None, your original strategy logic applies
        if condition_for_long:  # Replace with your actual conditions
            return 'long'
        elif condition_for_short:  # Replace with your actual conditions
            return 'short'

        return None  # No position to be opened

class Backtester:
    def __init__(self, timeframe, backtest_days, asset_name, investment_amount, loss_percentage):
        self.timeframe = timeframe
        self.backtest_days = backtest_days
        self.asset_name = asset_name
        self.investment_amount = investment_amount
        self.loss_percentage = loss_percentage
        self.data = []

    def fetch_data(self):
        try:
            interval_mapping = {'1m': 1, '3m': 3, '5m': 5, '15m': 15, '30m': 30, '1h': 60, '2h': 120, '4h': 240, '1d': 1440}
            minutes = self.backtest_days * 24 * 60
            limit = min(int(minutes / interval_mapping[self.timeframe]), 1000)
            url = f"https://api.binance.com/api/v3/klines?symbol={self.asset_name}&interval={self.timeframe}&limit={limit}"
            response = requests.get(url)
            response.raise_for_status()  # Raise HTTPError for bad responses
            raw_data = response.json()
            for entry in raw_data:
                self.data.append({
                    'timestamp': entry[0],
                    'open': float(entry[1]),
                    'high': float(entry[2]),
                    'low': float(entry[3]),
                    'close': float(entry[4]),
                    'volume': float(entry[5]),
                    # TODO: Calculate lower and upper Bollinger bands here
                })
            print(f"Fetched {len(self.data)} data points.")
        except requests.RequestException as e:
            print(f"An error occurred: {e}")
            return None

    def backtest(self, strategy):
        context = pd.DataFrame(columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        position = None
        entry_price = 0.0
        stop_loss = 0.0
        capital = self.investment_amount

        for candle in self.data:
            if position == 'long':
                if candle['close'] < stop_loss:
                    loss_amount = self.loss_percentage / 100 * capital
                    capital -= loss_amount
                    print(f"Closing long position at {candle['close']} due to stop loss. Loss amount: {loss_amount:.2f}")  
                    strategy.last_closed_position = 'long'  
                    position = None
                else:
                    gain_amount = (candle['close'] - entry_price) / entry_price * capital
                    capital += gain_amount
                    print(f"Closing long position at {candle['close']} due to gain. Gain amount: {gain_amount:.2f}")  
                    position = None  

            elif position == 'short':
                if candle['close'] > stop_loss:
                    loss_amount = self.loss_percentage / 100 * capital
                    capital -= loss_amount
                    print(f"Closing short position at {candle['close']} due to stop loss. Loss amount: {loss_amount:.2f}")  
                    strategy.last_closed_position = 'short'  
                    position = None
                else:
                    gain_amount = (entry_price - candle['close']) / entry_price * capital
                    capital += gain_amount
                    print(f"Closing short position at {candle['close']} due to gain. Gain amount: {gain_amount:.2f}")  
                    position = None  

            new_position = strategy.evaluate(candle, context)
            
            if new_position != position and new_position is not None:
                position = new_position
                entry_price = candle['close']
                print(f"Opening {position} position at {entry_price}")

                if position == 'long':
                    stop_loss = entry_price * (1 - self.loss_percentage / 100)
                elif position == 'short':
                    stop_loss = entry_price * (1 + self.loss_percentage / 100)

            # Update context and truncate to keep only the most recent candles.
            context = context.append(candle, ignore_index=True)
            context = context.tail(strategy.length)

        print(f"Final capital after backtesting: {capital:.2f}")

        return capital




# Fitness function
def fitness(backtest_days, loss_percentage):
    backtester = Backtester('1d', backtest_days, asset_name, investment_amount, loss_percentage)
    backtester.fetch_data()
    bollinger_strategy = BollingerBandStrategy()
    return backtester.backtest(bollinger_strategy)

  
    
if __name__ == "__main__":
    # Initialize population
    population = []
    for _ in range(POPULATION_SIZE):
        backtest_days = random.randint(7, 200)
        loss_percentage = random.uniform(0, 15)
        population.append((backtest_days, loss_percentage))
        #backtester.backtest(bollinger_strategy)
        # Main Genetic Algorithm loop
    for generation in range(GENERATIONS):
        print(f"Generation {generation+1}")

    # Evaluate fitness
    fitness_values = [fitness(*params) for params in population]

    # Select parents via tournament selection
    parents = []
    for _ in range(int(POPULATION_SIZE * CROSSOVER_RATE)):
        tournament = random.sample(population, 5)  # Tournament size of 5
        tournament_fitness = [fitness(*params) for params in tournament]
        winner = tournament[tournament_fitness.index(max(tournament_fitness))]
        parents.append(winner)

    # Crossover
    offspring = []
    for i in range(0, len(parents), 2):
        if i+1 >= len(parents):
            break

        parent1 = parents[i]
        parent2 = parents[i+1]
        
        crossover_point = random.randint(1, 1)  # We have only 2 parameters
        child1 = parent1[:crossover_point] + parent2[crossover_point:]
        child2 = parent2[:crossover_point] + parent1[crossover_point:]
        
        offspring.append(child1)
        offspring.append(child2)

    # Mutation
    for i in range(len(offspring)):
        if random.random() < MUTATION_RATE:
            mutate_param = random.randint(0, 1)
            if mutate_param == 0:
                # Mutate backtest_days
                offspring[i] = (random.randint(7, 200), offspring[i][1])
            else:
                # Mutate loss_percentage
                offspring[i] = (offspring[i][0], random.uniform(0, 15))

    # Replacement: Elitism + rest random
    best_individual = population[fitness_values.index(max(fitness_values))]
    population = [best_individual] + random.sample(offspring + parents, POPULATION_SIZE - 1)

# Final evaluation
fitness_values = [fitness(*params) for params in population]
best_individual = population[fitness_values.index(max(fitness_values))]

print(f"Best parameters found: backtest_days = {best_individual[0]}, loss_percentage = {best_individual[1]:.2f}")

    
    